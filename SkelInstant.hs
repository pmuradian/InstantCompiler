module SkelInstant where

-- Haskell module generated by the BNF converter

import AbsInstant
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

concatArray :: [String] -> String
concatArray (x:xs) = x ++ concatArray xs
concatArray [] = "\n"

transProgram :: Program -> String
transProgram x = case x of
  Prog stmts -> do
    let context = Context 0 0 ["1"]
    let asdf = transStmt(stmts context)
    concatArray $ map asdf

transStmt :: Stmt -> Context -> String
transStmt x context = case x of
  SAss ident exp -> transExp exp ++ "istore " ++ transIdent ident ++ "\n"
  SExp exp -> transExp exp

transIdent :: Ident -> String
transIdent x = case x of
  Ident string -> string

transExp :: Exp -> String
transExp x = case x of
  ExpAdd exp1 exp2 -> transExp exp1 ++ transExp exp2 ++ "iadd\n"
  ExpSub exp1 exp2 -> transExp exp1 ++ transExp exp2 ++ "isub\n"
  ExpMul exp1 exp2 -> transExp exp1 ++ transExp exp2 ++"imul\n"
  ExpDiv exp1 exp2 -> transExp exp1 ++ transExp exp2 ++"idiv\n"
  ExpLit integer -> "iconst " ++ show integer ++ "\n"
  ExpVar ident -> "iload " ++ transIdent ident ++ "\n"
